@use "sass:map";

// Responsive breakpoint mixin with container query support
@mixin utrecht-grid-responsive-breakpoint($name, $fallback-size: 600px) {
  @media screen and (min-width: #{$fallback-size}) {
    @content;
  }

  @supports (container-type: inline-size) {
    @container (min-width: #{$fallback-size}) {
      @content;
    }
  }
}

// Container styles mixin
@mixin utrecht-grid-container {
  align-items: var(--_utrecht-grid-align-items, initial);
  display: var(--_utrecht-grid-display, flex);
  flex-direction: var(--_utrecht-grid-flex-direction, row);
  flex-wrap: var(--_utrecht-grid-flex-wrap, wrap);
  justify-content: var(--_utrecht-grid-justify-content, initial);
}

// Cell styles mixin
@mixin utrecht-grid-cell {
  align-items: var(--_utrecht-grid-align-items, initial);
  box-sizing: var(--_utrecht-grid-box-sizing, border-box);
  display: var(--_utrecht-grid-display, block);
  flex: var(--_utrecht-grid-flex, 0 0 auto);
  inline-size: calc(
    var(--_utrecht-columns, var(--_utrecht-grid-columns-default, 4)) / var(--_utrecht-grid-columns-total, 12) * 100%
  );
  justify-content: var(--_utrecht-grid-justify-content, initial);
  order: var(--_utrecht-grid-order, initial);
}

@mixin utrecht-grid-columns($breakpoint: null) {
  @for $i from 1 through 12 {
    @if $breakpoint {
      &--#{$breakpoint}-#{$i} {
        --_utrecht-columns: #{$i};
      }
    } @else {
      &--xs-#{$i} {
        --_utrecht-columns: #{$i};
      }
    }
  }
}

@mixin utrecht-grid-order($breakpoint: null) {
  @for $i from 1 through 12 {
    @if $breakpoint {
      &--order-#{$breakpoint}-#{$i} {
        --_utrecht-grid-order: #{$i};
      }
    } @else {
      &--order-#{$i} {
        --_utrecht-grid-order: #{$i};
      }
    }
  }
}

@mixin utrecht-grid-justify-content(
  $breakpoint: null,
  $values: (
    flex-start,
    flex-end,
    center,
    space-between,
  )
) {
  @each $value in $values {
    @if $breakpoint {
      &--justify-content-#{$breakpoint}-#{$value} {
        --_utrecht-grid-justify-content: #{$value};
        --_utrecht-grid-display: flex;
      }
    } @else {
      &--justify-content-#{$value} {
        --_utrecht-grid-justify-content: #{$value};
        --_utrecht-grid-display: flex;
      }
    }
  }
}

@mixin utrecht-grid-align-items(
  $breakpoint: null,
  $values: (
    flex-start,
    flex-end,
    center,
  )
) {
  @each $value in $values {
    @if $breakpoint {
      &--align-items-#{$breakpoint}-#{$value} {
        --_utrecht-grid-align-items: #{$value};
        --_utrecht-grid-display: flex;
      }
    } @else {
      &--align-items-#{$value} {
        --_utrecht-grid-align-items: #{$value};
        --_utrecht-grid-display: flex;
      }
    }
  }
}

@mixin utrecht-grid-spacing(
  $spacings: (
    "sm": 8px,
    "md": 16px,
    "lg": 24px,
  )
) {
  @each $name, $value in $spacings {
    &--spacing-#{$name} {
      margin-block: calc(-1 * var(--utrecht-grid-spacing-#{$name}, #{$value}));
      margin-inline: calc(-1 * var(--utrecht-grid-spacing-#{$name}, #{$value}));
    }

    &--spacing-#{$name} .utrecht-grid__cell {
      padding-block: var(--utrecht-grid-spacing-#{$name}, #{$value});
      padding-inline: var(--utrecht-grid-spacing-#{$name}, #{$value});
    }
  }
}

// Flex direction mixin
@mixin utrecht-grid-flex-direction(
  $values: (
    column,
    column-reverse,
    row,
    row-reverse,
  )
) {
  @each $value in $values {
    &--flex-direction-#{$value} {
      --_utrecht-grid-flex-direction: #{$value};
    }
  }
}

// Generate all responsive classes with configurable breakpoints
@mixin utrecht-grid-responsive-classes(
  $breakpoints: (
    "sm": 600px,
    "md": 960px,
    "lg": 1280px,
  )
) {
  // Base classes (xs)
  @include utrecht-grid-columns;
  @include utrecht-grid-order;

  // Responsive classes with configurable breakpoints
  @each $breakpoint, $fallback-size in $breakpoints {
    @include utrecht-grid-responsive-breakpoint($breakpoint, $fallback-size) {
      @include utrecht-grid-columns($breakpoint);
      @include utrecht-grid-order($breakpoint);
    }
  }
}
